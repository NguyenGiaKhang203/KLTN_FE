import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Modal,
  Form,
  Input,
  Space,
  message,
  Tooltip,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
} from "@ant-design/icons";
import {
  PageContainer,
  FlexHeader,
  TableWrapper,
  TitleText,
} from "./style";
import * as NotificationService from "../../../services/NotificationService";
import { useSelector } from "react-redux";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const NotificationManagement = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [form] = Form.useForm();
  const [data, setData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [deleteId, setDeleteId] = useState(null);

  const user = useSelector((state) => state.user);
  const token = user?.access_token;

  // üöÄ L·∫•y danh s√°ch th√¥ng b√°o
  const fetchData = async () => {
    try {
      const response = await NotificationService.getAllNotification();
      if (response.status === "OK") {
        setData(response.data);
      } else {
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√¥ng b√°o");
      }
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng b√°o");
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // üöÄ Th√™m th√¥ng b√°o
  const handleAdd = () => {
    setEditingItem(null);
    form.resetFields();
    setModalOpen(true);
  };

  // üöÄ S·ª≠a th√¥ng b√°o
  const handleEdit = (record) => {
    setEditingItem(record);
    form.setFieldsValue(record);
    setModalOpen(true);
  };

  // üöÄ M·ªü modal x√°c nh·∫≠n x√≥a
  const handleDelete = (id) => {
    setDeleteId(id);
    setDeleteModalOpen(true);
  };

  // üöÄ X√°c nh·∫≠n x√≥a
  const confirmDelete = async () => {
    try {
      const response = await NotificationService.deleteNotification(deleteId, token)

      // üöÄ Ki·ªÉm tra n·∫øu response tr·∫£ v·ªÅ ch·ªâ c√≥ message
      if (response.message && response.message.includes("th√†nh c√¥ng")) {
        toast.success(response.message,{
          position: "top-right",
        autoClose: 3000,      // ‚úÖ T·ª± ƒë·ªông ƒë√≥ng sau 3 gi√¢y
        closeButton: false,
        }); // üü¢ Th√¥ng baÃÅo thaÃÄnh c√¥ng
        fetchData();
        
      } else {
        toast.error(response.message || "X√≥a th√¥ng b√°o th·∫•t b·∫°i!",{
          position: "top-right",
          autoClose: 3000,
          closeButton: false,
        });
      }
    } catch (error) {
      console.error("L·ªói khi g·ªçi API x√≥a:", error);
      toast.error("X√≥a th√¥ng b√°o th·∫•t b·∫°i!",{
         position: "top-right",
        autoClose: 3000,
        closeButton: false,
      });
    } finally {
      setDeleteModalOpen(false);
    }
  };

  // üöÄ L∆∞u th√¥ng b√°o (Th√™m ho·∫∑c C·∫≠p nh·∫≠t)
  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      const now = new Date().toLocaleDateString();

      if (editingItem) {
        // C·∫≠p nh·∫≠t th√¥ng b√°o
        await NotificationService.updateNotification(editingItem._id, values, token);
        toast.success("C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng!",{
          position: "top-right",
          autoClose: 3000,
          closeButton: false,
        });
      } else {
        // T·∫°o m·ªõi th√¥ng b√°o
        const newItem = {
          ...values,
          date: now,
        };
        await NotificationService.createNotification(newItem, token);
        toast.success("Th√™m th√¥ng b√°o th√†nh c√¥ng!",{
          position: "top-right",
          autoClose: 3000,
          closeButton: false,
        });
      }

      setModalOpen(false);
      fetchData(); // üöÄ Load l·∫°i d·ªØ li·ªáu sau khi th√™m/s·ª≠a
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng b√°o",{
        position: "top-right",
        autoClose: 3000,
        closeButton: false,
      });
    }
  };

  // üöÄ B·ªô l·ªçc t√¨m ki·∫øm
  const filteredData = Array.isArray(data)
    ? data.filter(
        (item) =>
          item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          item.message.toLowerCase().includes(searchTerm.toLowerCase())
      )
    : [];

  // üöÄ C·∫•u tr√∫c b·∫£ng
  const columns = [
    {
      title: "STT",
      dataIndex: "index",
      key: "index",
      render: (_, __, idx) => idx + 1,
      width: 70,
    },
    {
      title: "Ti√™u ƒë·ªÅ",
      dataIndex: "title",
    },
    {
      title: "N·ªôi dung",
      dataIndex: "message",
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "actions",
      width: 120,
      render: (_, record) => (
        <Space>
          <Tooltip title="S·ª≠a">
            <EditOutlined
              style={{ color: '#1677ff', cursor: 'pointer' }}
              onClick={() => handleEdit(record)}
            />
          </Tooltip>
          <Tooltip title="Xo√°">
            <DeleteOutlined
              style={{ color: '#ff4d4f', cursor: 'pointer' }}
              onClick={() => handleDelete(record._id)}
            />
          </Tooltip>
        </Space>
      ),
    },
  ];

  return (
    <PageContainer>
      <TitleText>Qu·∫£n l√Ω th√¥ng b√°o</TitleText>

      <FlexHeader>
        <Input.Search
          placeholder="T√¨m ki·∫øm th√¥ng b√°o..."
          allowClear
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ width: 300 }}
        />

        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={handleAdd}
          style={{ borderRadius: 8, fontWeight: 500 }}
        >
          Th√™m th√¥ng b√°o
        </Button>
      </FlexHeader>

      <TableWrapper>
        <Table
          dataSource={filteredData}
          columns={columns}
          rowKey="_id"
          pagination={{ pageSize: 5 }}
        />
      </TableWrapper>

      <Modal
        title="X√°c nh·∫≠n x√≥a"
        open={deleteModalOpen}
        onOk={confirmDelete}
        onCancel={() => setDeleteModalOpen(false)}
        okText="X√≥a"
        cancelText="H·ªßy"
      >
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y kh√¥ng?</p>
      </Modal>

      <Modal
        title={editingItem ? "Ch·ªânh s·ª≠a th√¥ng b√°o" : "Th√™m th√¥ng b√°o"}
        open={modalOpen}
        centered
        onCancel={() => setModalOpen(false)}
        onOk={handleSubmit}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form}>
          <Form.Item
            label="Ti√™u ƒë·ªÅ"
            name="title"
            rules={[{ required: true, message: "Nh·∫≠p ti√™u ƒë·ªÅ!" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="N·ªôi dung"
            name="message"
            rules={[{ required: true, message: "Nh·∫≠p n·ªôi dung!" }]}
          >
            <Input.TextArea rows={4} />
          </Form.Item>
        </Form>
      </Modal>

      {/* üöÄ ToastContainer ƒë√£ c·∫•u h√¨nh l·∫°i g√≥c tr√™n ph·∫£i */}
      <ToastContainer
        position="top-right"
        autoClose={3000} // ‚úÖ T·ª± ƒë·ªông ƒë√≥ng sau 3 gi√¢y
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss={false} // ‚úÖ Kh√¥ng t·∫°m d·ª´ng khi m·∫•t focus
        draggable
        pauseOnHover={false}     // ‚úÖ Kh√¥ng t·∫°m d·ª´ng khi hover v√†o
        theme="colored"
      />

    </PageContainer>
  );
};

export default NotificationManagement;
