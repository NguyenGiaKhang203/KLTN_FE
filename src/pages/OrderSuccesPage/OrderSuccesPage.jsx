import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { Result, Button } from "antd";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import { removeAllOrderProduct } from "../../redux/slices/orderSlice";
import { OrderService } from "../../services/OrderService";
import { WrapperOrderSuccess } from "./style";

const OrderSuccessPage = () => {
  const user = useSelector((state) => state.user.user);
  const selectedItems = useSelector((state) => state.order.orderItemsSlected);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  useEffect(() => {
    const createOrder = async () => {
      if (!user || !selectedItems?.length) {
        toast.error("Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c s·∫£n ph·∫©m.");
        return;
      }
      console.log("üßæ selectedItems:", selectedItems);
      // ‚úÖ G·ª≠i ƒë·∫ßy ƒë·ªß th√¥ng tin t·ª´ng kh√≥a h·ªçc
      const mappedItems = selectedItems.map((item) => ({
        courseId: item.courseId,
        classId: item.classId,
        name: item.name,
        price: item.price,
        image: item.image,
        schedule: item.schedule || "Ch∆∞a c√≥ l·ªãch h·ªçc", 
        amount: item.quantity,
      }));
      
      
      

      const totalPrice = mappedItems.reduce(
        (sum, item) => sum + (item.price || 0) * (item.amount || 1),
        0
      );

      const orderData = {
        userId: user._id,
        items: mappedItems,
        totalPrice,
        paymentMethod: "vnpay",
        fullName: user.fullName,
        address: user.address,
        phone: user.phone,
      };

      try {
        await OrderService.createOrder(user._id, orderData);
        toast.success("ƒêƒÉng kyÃÅ khoÃÅa hoÃ£c th√†nh c√¥ng!");

        // ‚úÖ X√≥a c√°c kh√≥a h·ªçc ƒë√£ mua kh·ªèi gi·ªè h√†ng
        const paidIds = mappedItems.map((item) => item.courseId);
        dispatch(removeAllOrderProduct({ listChecked: paidIds }));

      } catch (err) {
        console.error("L·ªói t·∫°o ƒë∆°n h√†ng:", err);
        toast.error("L·ªói khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    };

    createOrder();
  }, [user, selectedItems, dispatch]);

  return (
    <WrapperOrderSuccess>
      <Result
        status="success"
        title="üéâ Thanh to√°n th√†nh c√¥ng!"
        subTitle="Trung t√¢m ƒëaÃÉ xaÃÅc nh√¢Ã£n baÃ£n ƒëaÃÉ ƒëƒÉng kyÃÅ khoÃÅa hoÃ£c."
        extra={[
          <Button type="primary" key="myOrders" onClick={() => navigate("/my-orders")}>
            Xem c√°c kh√≥a h·ªçc ƒë√£ mua
          </Button>,
        ]}
      />
      <ToastContainer position="top-right" autoClose={3000} />
    </WrapperOrderSuccess>
  );
};

export default OrderSuccessPage;
