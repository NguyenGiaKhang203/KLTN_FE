import { Button, Modal, Form, Input, InputNumber, Select, Upload } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import { useEffect, useRef, useState } from 'react';
import { ModalWrapper } from './style';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const { TextArea } = Input;
const { Option } = Select;

const getBase64 = (file) =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
  });

export default function CourseFormModal({
  visible,
  onCancel,
  onSubmit,
  initialValues,
}) {
  const [form] = Form.useForm();
  const [imageUrl, setImageUrl] = useState('');
  const uploadKeyRef = useRef(Date.now());

  useEffect(() => {
    if (initialValues) {
      form.setFieldsValue(initialValues);
      setImageUrl(initialValues.image || '');
    } else {
      form.resetFields();
      setImageUrl('');
    }
    uploadKeyRef.current = Date.now(); // Reset upload m·ªói l·∫ßn m·ªü modal
  }, [initialValues, visible, form]);

  const handleOk = () => {
    form.validateFields()
      .then((values) => {
        onSubmit({ ...values, image: imageUrl });
        toast.success(initialValues ? 'C·∫≠p nh·∫≠t th√†nh c√¥ng' : 'T·∫°o m·ªõi kh√≥a h·ªçc th√†nh c√¥ng');
        form.resetFields();
        setImageUrl('');
        uploadKeyRef.current = Date.now(); // Reset l·∫°i sau submit
      })
      .catch(() => toast.error('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!'));
  };

  const handleUpload = async (info) => {
    const file = info.file; // ‚úÖ D√πng tr·ª±c ti·∫øp (v√¨ l√† File object r·ªìi)

    console.log("üëâ file info:", info);
    console.log("üëâ d√πng tr·ª±c ti·∫øp file:", file);

    if (!file) {
      toast.error("Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh. Vui l√≤ng ch·ªçn l·∫°i.");
      return;
    }

    if (!file.type?.startsWith("image/")) {
      toast.error("Vui l√≤ng ch·ªçn m·ªôt file ·∫£nh h·ª£p l·ªá!");
      return;
    }

    try {
      const base64 = await getBase64(file);
      setImageUrl(base64);
      toast.success(`${file.name} ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n.`);
    } catch (err) {
      console.error("üî• L·ªói khi ƒë·ªçc ·∫£nh:", err);
      toast.error("T·∫£i ·∫£nh th·∫•t b·∫°i!");
    }
  };

  return (
    <ModalWrapper>
      <Modal
        title={initialValues ? 'Ch·ªânh s·ª≠a kh√≥a h·ªçc' : 'Th√™m kh√≥a h·ªçc'}
        open={visible}
        onCancel={onCancel}
        onOk={handleOk}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form layout="vertical" form={form}>
          <Form.Item
            name="name"
            label="T√™n kh√≥a h·ªçc"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n kh√≥a h·ªçc' }]}
          >
            <Input placeholder="Nh·∫≠p t√™n kh√≥a h·ªçc" />
          </Form.Item>

          <Form.Item
            name="type"
            label="Lo·∫°i kh√≥a h·ªçc"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i' }]}
          >
            <Select placeholder="Ch·ªçn lo·∫°i">
              <Option value="C∆° b·∫£n">C∆° b·∫£n</Option>
              <Option value="Trung c·∫•p 1">Trung c·∫•p 1</Option>
              <Option value="Trung c·∫•p 2">Trung c·∫•p 2</Option>
              <Option value="N√¢ng cao 1">N√¢ng cao 1</Option>
              <Option value="N√¢ng cao 2">N√¢ng cao 2</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="price"
            label="Gi√° g·ªëc"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p gi√° g·ªëc' }]}
          >
            <InputNumber min={0} style={{ width: '100%' }} placeholder="Nh·∫≠p gi√° g·ªëc" />
          </Form.Item>

          <Form.Item name="discount" label="Gi·∫£m gi√° (%)">
            <InputNumber min={0} max={100} style={{ width: '100%' }} placeholder="Nh·∫≠p ph·∫ßn trƒÉm gi·∫£m" />
          </Form.Item>

          <Form.Item name="rating" label="ƒê√°nh gi√°">
            <InputNumber min={0} max={5} step={0.1} style={{ width: '100%' }} placeholder="VD: 4.5" />
          </Form.Item>

          <Form.Item name="description" label="M√¥ t·∫£">
            <TextArea rows={4} placeholder="Nh·∫≠p m√¥ t·∫£ kh√≥a h·ªçc" />
          </Form.Item>

          <Form.Item label="·∫¢nh kh√≥a h·ªçc">
            <Upload
              key={uploadKeyRef.current}
              beforeUpload={() => false}
              onChange={handleUpload}
              showUploadList={false}
              accept="image/*"
              maxCount={1}
              fileList={[]} // reset m·ªói l·∫ßn upload
            >
              <Button icon={<UploadOutlined />}>Ch·ªçn ·∫£nh t·ª´ m√°y</Button>
            </Upload>

            {imageUrl && (
              <img
                src={imageUrl}
                alt="preview"
                style={{ marginTop: 10, width: '100%', borderRadius: 8 }}
              />
            )}
          </Form.Item>
        </Form>
      </Modal>
    </ModalWrapper>
  );
}
